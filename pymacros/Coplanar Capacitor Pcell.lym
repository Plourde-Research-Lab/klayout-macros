<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description/>
 <version/>
 <category>pymacros</category>
 <prolog/>
 <epilog/>
 <doc/>
 <autorun>true</autorun>
 <autorun-early>false</autorun-early>
 <shortcut/>
 <show-in-menu>false</show-in-menu>
 <group-name/>
 <menu-path/>
 <interpreter>python</interpreter>
 <dsl-interpreter-name/>
 <text>import math
from pya import *

"""
This is a library of P-Cells for Coplanar, Interdigitated, and Parallel Plate Capacitors
- Caleb Howington 
- Syracuse University
- Spring 2016
"""

class CoplanarCap(PCellDeclarationHelper):
  """
  The PCell declaration for the circle
  """

  def __init__(self):

    # Important: initialize the super class
    super(CoplanarCap, self).__init__()

    # declare the parameters
    self.param("xt", self.TypeDouble, "X Width of Electrode", default = 20)
    self.param("yt", self.TypeDouble, "Y Width of Electrode", default = 40)
    self.param("gt", self.TypeDouble, "Width of Ground Plane to leave", default = 4)

    self.param("s1", self.TypeDouble, "Center Conductor Width of CPW 1", default = 10)
    self.param("w1", self.TypeDouble, "Spacing Width of CPW 1", default=6)
    self.param("s2", self.TypeDouble, "Center Conductor Width of CPW 2", default = 10)
    self.param("w2", self.TypeDouble, "Spacing Width of CPW 2", default=6)

    self.param("x_size", self.TypeDouble, "Total Width of Capacitor Cell", default = 200)
    self.param("y_size", self.TypeDouble, "Total Height of Capacitor Cell", default = 100)

    self.param("l", self.TypeLayer, "Layer", default = LayerInfo(1, 0))
    self.param("bboxLayer", self.TypeLayer, "Bounding Box Layer", default=LayerInfo(1, 3))

    # Hidden parameter indicating capacitance, whenever I figure that out...
    self.param("c", self.TypeDouble, "Capacitance", readonly = True)

  def display_text_impl(self):
    # Provide a descriptive text for the cell
    return "CoplanarCap(xt={}, yt={}, gt={}, c={}fF)".format(self.xt, self.yt, self.gt, self.c)
  
  #def coerce_parameters_impl(self):
    #total_height = 2*self.yt + 2*self.gt + 2*self.w1 + 4*self.w2 + self.s1
    #if  total_height &gt; self.y_size:
      #self.y_size = total_height + 60
    #else:
      #self.y_size = 100
  
  # def can_create_from_shape_impl(self):
  #   # Implement the "Create PCell from shape" protocol: we can use any shape which 
  #   # has a finite bounding box
  #   return self.shape.is_box() or self.shape.is_polygon() or self.shape.is_path()
  
  # def parameters_from_shape_impl(self):
  #   # Implement the "Create PCell from shape" protocol: we set r and l from the shape's 
  #   # bounding box width and layer
  #   self.r = self.shape.bbox().width() * self.layout.dbu / 2
  #   self.l = self.layout.get_info(self.layer)
  
  def transformation_from_shape_impl(self):
    # Implement the "Create PCell from shape" protocol: we use the center of the shape's
    # bounding box to determine the transformation
    return Trans(self.shape.bbox().center())
  
  def produce_impl(self):
    total_height = 2*self.yt + 4*self.gt + 4*self.w1 + 2*self.w2 + self.s1
    print(total_height)
    if  total_height &gt; self.y_size:
      self.y_size = total_height + 100

    # This is the main part of the implementation: create the layout

    # fetch the parameters
    dbu = self.layout.dbu

    # Create Top Electrode
    x0 = 0
    y0 = (self.s1/2 + self.w1 + self.gt + self.w2)/dbu

    bl1 = Point(x0 - self.xt/dbu, y0)
    tr1 = Point(x0, y0+self.yt/dbu)

    topEl = Box(bl1, tr1)

    # Create Top Electrode
    bl2 = Point(x0 - self.xt/dbu, -y0)
    tr2 = Point(x0, -y0-self.yt/dbu)

    bottomEl = Box(bl2, tr2)

    # Connect them
    p1 = Point(x0, y0+self.yt/dbu)
    p2 = Point(x0 + self.s2/dbu, -y0-self.yt/dbu)
    joinEl = Box(p1, p2)

    # Create CPW Connection
    cpw2 = Path([Point(0, 0), Point(self.x_size/2/dbu, 0)], self.s2/dbu)

    # Join all piecesr
    ep = EdgeProcessor()
    pieces = [Polygon(topEl), Polygon(bottomEl), Polygon(joinEl), cpw2.polygon()]
    cap = ep.merge_p2p(pieces, 0, True, True)

    # Create Spacing
    spacing = ep.size_p2p(cap, self.w2/dbu, 2, True, True)

    # Create CPW1
    p1 = Point(- self.w2/dbu - self.gt/dbu - self.w1/dbu, 0)
    p2 = Point(-self.x_size/2/dbu, 0)
    cpw1 = Path([p1, p2], self.s1/dbu)

    spacing2 = ep.size_p2p([cpw1.polygon()], self.w1/dbu, 2, True, True)

    # Cut Metal out of Spacing
    a = [spacing[0], spacing2[0]]
    b = [cap[0], cpw1.polygon()]
    shapes = ep.boolean_p2p(a, b, EdgeProcessor().ModeANotB, True, False)

    # Cut Spacing out of Ground Plane
    # ground = Box(Point(-self.x_size/2./dbu, -self.y_size/2./dbu), Point(self.x_size/2./dbu, self.y_size/2./dbu))

    # Add Bounding Box
    bbox = Box(Point(-self.x_size/2./dbu, -self.y_size/2./dbu), Point(self.x_size/2./dbu, self.y_size/2./dbu))

    # Trim to Bounding Box

    finalShapes = ep.boolean_p2p(shapes, [Polygon(bbox)], EdgeProcessor().ModeAnd, True, False)

    # Push into layout
    for shape in finalShapes:
      self.cell.shapes(self.l_layer).insert(shape)

    self.cell.shapes(self.bboxLayer_layer).insert(bbox)



class CPW(pya.PCellDeclarationHelper):
  """
  The PCell declaration for a CPW based on a path
  """

  def __init__(self):

    # Important: initialize the super class
    super(CPW, self).__init__()

    # declare the parameters
    self.param("layer", self.TypeLayer, "Layer", default = pya.LayerInfo(1, 0))
    self.param("shape", self.TypeShape, "", default = pya.Path())
    self.param("w", self.TypeDouble, "Center Conductor width", default = 0.1)
    self.param("s", self.TypeInt, "Gap Width", default = 64)
    self.param("name", self.TypeString, "Name", default= "cpw")
    # this hidden parameter is used to determine whether the radius has changed
    # or the "s" handle has been moved
    self.param("length", self.TypeDouble, "Length", default=0.0, readonly=True)
    self.param("frequency", self.TypeDouble, "Frequency", default = 0.0, readonly= True)
    self.param("impedance", self.TypeDouble, "Impedance", default = 50., readonly = True)

  def display_text_impl(self):
    # Provide a descriptive text for the cell
    return "CPW(L=" + str(self.length) + ",Name=" + str(self.name) + ")"

  def coerce_parameters_impl(self):

    # We employ coerce_parameters_impl to decide whether the handle or the
    # numeric parameter has changed (by comparing against the effective
    # radius ru) and set ru to the effective radius. We also update the
    # numerical value or the shape, depending on which on has not changed.
    rs = None

  def can_create_from_shape_impl(self):
    # Implement the "Create PCell from shape" protocol: we can use any shape which
    # has a finite bounding box
    return self.shape.is_path()

  def parameters_from_shape_impl(self):
    # Implement the "Create PCell from shape" protocol: we set r and l from the shape's
    # bounding box width and layer
    #self.shape = self.shape.bbox.width() * self.layout.dbu() / 2
    pass
    #self.l = self.layout.get_info(self.layer)

  def transformation_from_shape_impl(self):
    # Implement the "Create PCell from shape" protocol: we use the center of the shape's
    # bounding box to determine the transformation
    return pya.Trans(self.shape.bbox().center())

  def produce_impl(self):

    # This is the main part of the implementation: create the layout

    # fetch the parameters
    # ru_dbu = self.ru / self.layout.dbu
    # 
    # # compute the circle
    # pts = []
    # da = math.pi * 2 / self.n
    # for i in range(0, self.n):
    #   pts.append(pya.Point.from_dpoint(pya.DPoint(ru_dbu * math.cos(i * da), ru_dbu * math.sin(i * da))))
    # 
    # # create the shape
    print(self.shape)
    newshape = pya.polygon(self.shape.polygon()).round_corners(95, 105, 100)
    self.cell.shapes(self.layer).insert(newshape)
    
class CapLib(Library):
  """
  The library where we will put the PCell into 
  """

  def __init__(self):
  
    # Set the description
    self.description = "Capacitor PCell Library"
    
    # Create the PCell declarations
    self.layout().register_pcell("CoplanarCap", CoplanarCap())
    #self.layout().register_pcell("CPW", CPW())
    # That would be the place to put in more PCells ...
    
    # Register us with the name "MyLib".
    # If a library with that name already existed, it will be replaced then.
    self.register("CapLib")


# Instantiate and register the library
CapLib()
</text>
</klayout-macro>
